Introduction to Go
3rd Edition

Elliot Wright
Full Stack Software Engineer at Byng
https://byng.co
https://tech.byng.co
https://github.com/SeerUK
hello@elliotdwright.com

* Introduction to Introduction to Go

Hang on... this isn't what Byng presentations normally look like! Uhhh... is this better?

.image images/byng-logo.jpg _ 150

What we're going to cover:

- What / Why Go?
- Code Samples
- Toolchain
- Q (and maybe) A

My objectives are...

* What?

- Developed at Google, by Robert Griesemer, Rob Pike, and Ken Thompson
- Statically typed
- Garbage collected
- Simple, regular syntax
- Speed (both at runtime, and compilation)
- Built-in primitives for concurrency
- Incredible standard library
- Incredible toolchain (more on that, coming up...)

: Robert Griesemer: Worked on the Java HotSpot compiler.
: Rob Pike: Member of Unix team at Bell Labs. Involved in the creation of a couple of operating sytems for Bell Labs, and the Limbo programming language.
: Ken Thompson: Also worked at Bell Labs. Designed and implemented the original Unix operating system. Also invented the B programming language, the direct predecessor to C.
: Used in production at Google (amongst many other places, BBC, CloudFlare, DigitalOcean, Docker, Dropbox, Facebook, GOV.UK, Hashicorp, Medium, SendGrid, Twitter, Uber, and many more).
: Explain what things are, why they're important.

* Why?

- No need for an interpreter (compiles to a statically linked binary)
- Designed with scalability in mind
- One way to do things, consistently
- Easy to ramp up new developers
- Type safety
- Very low resource usage

* Standard Library

- Archiving / compression
- Crypto, encoding, and hashing
- Database
- Flags (for building CLI applications)
- HTML and templating
- Image processing
- Maths
- Networking (HTTP, mail, RPC, SMTP, etc.)
- String conversations, and manipulation
- Testing
- Text (including things for creating custom parsers (which I've actually used!))
- Time
- ...

* Code Samples

* Hello, World!

I couldn't start without this...

.play ./code/00-hello-world.go

* Assignment and Type Inference

.play ./code/01-assignment-type-inference.go /START OMIT/,/END OMIT/

* Error Handling

A bit of a point of contention amongst developers. Usually people new to Go will find this bit a little cumbersome. Then you see the light...

.play ./code/02-error-handling.go /START OMIT/,/END OMIT/

: Errors are values.

* Pointers

.play ./code/03-pointers.go /START OMIT/,/END OMIT/

* Structs

.play ./code/04-structs.go /START OMIT/,/END OMIT/

* Interfaces and Duck Typing

.play ./code/05-interfaces-duck-typing.go /START OMIT/,/END OMIT/

* Goroutines

A goroutine is a lightweight thread managed by the Go runtime.

.play ./code/06-goroutines.go /START OMIT/,/END OMIT/

* Toolchain

* Common Tools

- `go` `build`
- `go` `doc`
- `go` `get`
- `go` `run`
- `go` `test`
- `gofmt` / `goimports`
- `golint`
- `gorename`

All of the above tools are available officially from golang.org!

- `gocode`: Autocomplete daemon.
- `gocov`: Third-party coverage reporting tool.

* Testing / Building / Running

To the terminal!

.image images/tron.jpg _ 800

* Q (and maybe) A
